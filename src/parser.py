'''

Name: Agilent IO Monitor Parser
Author: Marc Tapalla

Environment: Python 3.3.0
Created: Apr 17, 2014
Modified: May 22, 2014

Description:
    My VERY first Python script ever,
    aka my take on Hello World,
    aka proper "Pythonic" practice was disregarded :)

    The "Agilent IO Monitor" application, which is a part of Agilent's IO Libraries Suite,
    records all SCPI transactions sent between the host PC and instruments it is communicating with.
    This is useful for test plan analysis, pinpointing bottlenecks, inspecting measurement methodology, etc.
    This transaction log can be exported as an XML file; however it is impractical to use since it
    stores the transactions in unreadable binary format. Additionally, XML files are not friendly for
    bulk analysis (e.g. timings).

    This script will take the generated XML file, convert the binary SCPI into human-readable ASCII, 
    then format it into parsable formats such as .txt and .xls.

'''

import xml.etree.ElementTree as ET
import binascii
import struct
import sys
import os

def GetTraceList():
    tree = ET.parse('IOMonitorLog.xml')
    root = tree.getroot()
    
    for child in root.iter('TraceList'):
        return list(child)

def ExtractBinaryData(child):
    for subchild in child.iter('Parameter'):
        if (('buf' not in subchild.get('Name'))): continue
        if (subchild.get('ParamType') is 'pointer32'): return None
         
        for subsubchild in subchild.iter('Element'):
            if ('BinHexValue' not in subsubchild.attrib): continue
            return subsubchild.attrib['BinHexValue']

def Binblock2Ascii(binblock):
    UnpackFormat = ">"
    numberOfExpectedBytes = int(len(binblock) / 4)
    for _ in range(0, numberOfExpectedBytes):
        UnpackFormat = UnpackFormat + "f"
        
    return str(struct.unpack_from(UnpackFormat, binblock))

def InteractivePrompt():
    print(
        "Agilent IO Monitor Parser\n\n\
        Instructions:\n\
        1. Place the XML file generated by Agilent IO Monitor in the same directory as this script\n\
        2. Enter the file name below (can be blank if using default name: 'IOMonitorLog.xml')\n\
        3. This script will place the parsed results as '[Name].txt' and '[Name].xls' in the same directory\n\
        ")

    if (len(sys.argv)==1):
        xmlFileName = input('File Name: ') or "IOMonitorLog.xml"

    if (os.path.isfile(xmlFileName) is False) and (os.path.isfile(xmlFileName + ".xml") is False):
        print ("* Error: File '{}' could not be found".format(xmlFileName))
        print ("  Detected XML files:")

        # List any detected XML files within the directory
        foundXmlFiles = False
        for file in os.listdir("."):
            if file.endswith(".xml"):
                print("    {}".format(file))
                foundXmlFiles = True

        if foundXmlFiles is False:
            print("    (None)")

        quit()

    print("  > {}".format(xmlFileName))
    return xmlFileName

if __name__ == '__main__':

    xmlFileName = InteractivePrompt()
    
    ParsingRead = False
    
    OutputLog = open("{}.txt".format(xmlFileName), "w")
    OutputExcel = open("{}.xls".format(xmlFileName), "w")
    
    ScpiTypeList = []
    ScpiInstrumentList = []
    ScpiDataList = []
    
    for child in GetTraceList():
        
        CurrentBinaryData = None

        if ("viWrite" in child.get('MethodName')):
            CurrentBinaryData = ExtractBinaryData(child)
            ScpiTypeList.append("Write")
            ScpiInstrumentList.append(child.get('Address'))
            
        if (ParsingRead):
            CurrentBinaryData = ExtractBinaryData(child)
            ParsingRead = False
            
        if ("viRead" in child.get('MethodName')):
            ParsingRead = True
            ScpiTypeList.append("Read")
            ScpiInstrumentList.append(child.get('Address'))
            
        if (CurrentBinaryData == None or CurrentBinaryData == ""): continue

        # XML file stores data in binary. Convert data to ASCII
        EncodedAsciiData = binascii.b2a_qp(binascii.unhexlify(CurrentBinaryData))
        DecodedAsciiData = EncodedAsciiData.decode('utf-8').rstrip()
        ScpiDataList.append(DecodedAsciiData)

    # Parse the extracted data, including data returned as binary blocks
    AccumulatedScpiTypeList = []
    AccumulatedScpiDataList = []
    AccumulatedScpiInstrumentList = []
    for i in range(0, len(ScpiTypeList)):
        
        # Incoming binblock data detected
        # Example binblock string: "#220[binblock]"
        # The pound sign '#' indicates start of binblock datastream
        # The next digit, '2', indicates the following '2' digits is
        # the number of incoming bytes, '20'.
        # This tells us there will be '20' bytes in [binblock]
        if (ScpiTypeList[i] == "Read" and ScpiTypeList[i - 1] != "Read" and ScpiDataList[i].startswith('#')):
            UnparsedBinblockData = ScpiDataList[i]
            UnparsedBinblockData = UnparsedBinblockData[1:]  # Delete out the '#' sign from the concatenated string
            numberOfDigitsIncomingBytes = int(UnparsedBinblockData[0])  # Number of incoming binblock bytes
            numberOfExpectedBytes = int(UnparsedBinblockData[1:numberOfDigitsIncomingBytes + 1])  # Expec
            UnparsedBinblockData = UnparsedBinblockData[numberOfDigitsIncomingBytes + 1:]  # Delete out the 'number of bytes' that follow the '#' sign from the string
            
            AccumulatedScpiTypeList.append("Binblock Read")
            AccumulatedScpiDataList.append(UnparsedBinblockData)
            AccumulatedScpiInstrumentList.append(ScpiInstrumentList[i])
            continue
        
        # If the returned data is longer than the maximum number of characters allowed by the SCPI standard,
        # the data is broken up into segments and sent separately.
        # We want to concanenate all this segmented data
        if (ScpiTypeList[i] == "Read" and ScpiTypeList[i - 1] == "Read"):
            AccumulatedScpiDataList[len(AccumulatedScpiDataList) - 1 ] = AccumulatedScpiDataList[-1] + ScpiDataList[i]
            continue

        AccumulatedScpiDataList.append(ScpiDataList[i])
        AccumulatedScpiTypeList.append(ScpiTypeList[i])
        AccumulatedScpiInstrumentList.append(ScpiInstrumentList[i])
    
    # Output parsed data
    print("{} parsed SCPI transactions found".format(len(AccumulatedScpiTypeList)))
    print("{} total transactions".format(len(ScpiTypeList)))
    OutputLog.write("{} parsed SCPI transactions found\n".format(len(AccumulatedScpiTypeList)))
    OutputLog.write("{} total transactions\n".format(len(ScpiTypeList)))
    
    for i in range(0, len(AccumulatedScpiTypeList)):
        if (AccumulatedScpiTypeList[i] == "Binblock Read"):
            OutputData = Binblock2Ascii(binascii.a2b_qp(AccumulatedScpiDataList[i]))
        else: 
            OutputData =  AccumulatedScpiDataList[i]

        OutputData = OutputData.replace('=\n', '')
        print("\n{}\n{}\n{}".format(AccumulatedScpiInstrumentList[i], AccumulatedScpiTypeList[i], OutputData))
        OutputLog.write("\n{}\n{}\n{}\n".format(AccumulatedScpiInstrumentList[i], AccumulatedScpiTypeList[i], OutputData))
        OutputExcel.write("{}\t{}\t{}\n".format(AccumulatedScpiInstrumentList[i], AccumulatedScpiTypeList[i], OutputData))
        
    OutputLog.close()
    OutputExcel.close()
